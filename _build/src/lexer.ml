# 1 "src/lexer.mll"
 
open Parser

let reservedWords = [
  (* Keywords *)
  ("let", Parser.LET);
  ("fn", Parser.FUNCTION);
]

(* Support functions *)

let symbolTable = Hashtbl.create 1024
let _ = List.iter (fun (str,f) -> Hashtbl.add symbolTable str f) reservedWords



(* our white-space counter, stack, and associated functions *)
let ws_count = ref 0
let (ws_stack : int Stack.t) = Stack.create ()
let ws_flag : bool ref = ref false

let rcom_count = ref 0

# 26 "src/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\230\255\079\000\160\000\240\000\059\001\071\001\
    \000\000\158\000\242\255\243\255\244\255\245\255\246\255\247\255\
    \248\255\081\001\250\255\001\000\252\255\079\000\254\255\255\255\
    \239\255\096\001\241\255\236\255\002\000\240\255\235\255\237\255\
    \113\001\125\001\135\001\145\001\003\002\249\255\250\255\000\000\
    \251\255\252\255\081\000\254\255\255\255\208\000\254\255\255\255\
    \001\000\140\000\254\255\030\000\255\255\168\001\253\255\001\000\
    \014\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\022\000\255\255\255\255\024\000\023\000\024\000\022\000\021\000\
    \026\000\026\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\006\000\255\255\004\000\255\255\002\000\255\255\255\255\
    \255\255\021\000\255\255\255\255\017\000\255\255\255\255\255\255\
    \255\255\022\000\255\255\022\000\255\255\255\255\255\255\005\000\
    \255\255\255\255\002\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\001\000\255\255\255\255\255\255\002\000\
    \002\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\037\000\000\000\000\000\255\255\
    \000\000\000\000\255\255\000\000\000\000\046\000\000\000\000\000\
    \255\255\050\000\000\000\255\255\000\000\054\000\000\000\255\255\
    \255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\038\000\047\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\058\000\000\000\000\000\000\000\
    \000\000\000\000\016\000\018\000\014\000\017\000\006\000\015\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\011\000\010\000\009\000\019\000\031\000\024\000\
    \030\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\052\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\005\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\013\000\020\000\012\000\008\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\057\000\000\000\000\000\023\000\000\000\044\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\051\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\022\000\029\000\043\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\047\000\028\000\000\000\048\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \002\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\034\000\027\000\034\000\000\000\000\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\000\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\000\000\255\255\000\000\000\000\026\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\000\000\000\000\034\000\000\000\034\000\000\000\
    \032\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\000\000\032\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\056\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\040\000\038\000\000\000\000\000\
    \039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\041\000\000\000\055\000\042\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\039\000\048\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\055\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\008\000\019\000\
    \028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\051\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\056\000\255\255\255\255\021\000\255\255\042\000\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\255\255\255\255\255\255\255\255\003\000\049\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\021\000\009\000\042\000\255\255\255\255\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\045\000\009\000\255\255\045\000\255\255\255\255\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\009\000\005\000\255\255\255\255\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\255\255\255\255\255\255\255\255\005\000\
    \255\255\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\007\000\255\255\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\255\255\049\000\255\255\255\255\017\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\255\255\255\255\032\000\255\255\032\000\255\255\
    \006\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\007\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\053\000\255\255\255\255\255\255\255\255\
    \045\000\255\255\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\255\255\255\255\255\255\255\255\
    \035\000\255\255\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\036\000\036\000\255\255\255\255\
    \036\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\036\000\255\255\053\000\036\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \053\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\036\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec main lexbuf =
    __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "src/lexer.mll"
             ( ws_flag := false; Printf.printf "BLOCK COMMENT BEGIN\n"; block_comment lexbuf )
# 272 "src/lexer.ml"

  | 1 ->
# 47 "src/lexer.mll"
                   ( ws_flag := false; Printf.printf "RECURSIVE COMMENT BEGIN\n"; rcom_count := !rcom_count + 1; recursive_comment lexbuf )
# 277 "src/lexer.ml"

  | 2 ->
# 48 "src/lexer.mll"
             ( ws_flag := false; Printf.printf "LINE COMMENT BEGIN\n"; comment lexbuf )
# 282 "src/lexer.ml"

  | 3 ->
# 49 "src/lexer.mll"
             ( ws_flag := false; PIPE )
# 287 "src/lexer.ml"

  | 4 ->
# 50 "src/lexer.mll"
             ( ws_flag := false; EQUALS )
# 292 "src/lexer.ml"

  | 5 ->
# 51 "src/lexer.mll"
             ( ws_flag := false; PLUS )
# 297 "src/lexer.ml"

  | 6 ->
# 52 "src/lexer.mll"
             ( ws_flag := false; MINUS )
# 302 "src/lexer.ml"

  | 7 ->
# 53 "src/lexer.mll"
             ( ws_flag := false; ASTERISK )
# 307 "src/lexer.ml"

  | 8 ->
# 54 "src/lexer.mll"
             ( ws_flag := false; FWD_SLASH )
# 312 "src/lexer.ml"

  | 9 ->
# 55 "src/lexer.mll"
             ( ws_flag := false; COMMA )
# 317 "src/lexer.ml"

  | 10 ->
# 56 "src/lexer.mll"
             ( ws_flag := false; LCURLY )
# 322 "src/lexer.ml"

  | 11 ->
# 57 "src/lexer.mll"
             ( ws_flag := false; RCURLY )
# 327 "src/lexer.ml"

  | 12 ->
# 58 "src/lexer.mll"
             ( ws_flag := false; COLON )
# 332 "src/lexer.ml"

  | 13 ->
# 59 "src/lexer.mll"
             ( ws_flag := false; SEMICOLON )
# 337 "src/lexer.ml"

  | 14 ->
# 60 "src/lexer.mll"
             ( ws_flag := false; RIGHT_STAB )
# 342 "src/lexer.ml"

  | 15 ->
# 61 "src/lexer.mll"
             ( ws_flag := false; LEFT_STAB )
# 347 "src/lexer.ml"

  | 16 ->
# 62 "src/lexer.mll"
             ( ws_flag := false; RIGHT_FAT )
# 352 "src/lexer.ml"

  | 17 ->
# 63 "src/lexer.mll"
             ( ws_flag := false; LEFT_FAT )
# 357 "src/lexer.ml"

  | 18 ->
# 64 "src/lexer.mll"
             ( ws_flag := false; RIGHT_CURVY )
# 362 "src/lexer.ml"

  | 19 ->
# 65 "src/lexer.mll"
             ( ws_flag := false; LEFT_CURVY )
# 367 "src/lexer.ml"

  | 20 ->
# 66 "src/lexer.mll"
              ( ws_flag := false; SPACESHIP )
# 372 "src/lexer.ml"

  | 21 ->
let
# 67 "src/lexer.mll"
           i
# 378 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 67 "src/lexer.mll"
                ( ws_flag := false; INTEGER (int_of_string i) )
# 382 "src/lexer.ml"

  | 22 ->
let
# 68 "src/lexer.mll"
             f
# 388 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 68 "src/lexer.mll"
                ( ws_flag := false; FLOAT (float_of_string f) )
# 392 "src/lexer.ml"

  | 23 ->
let
# 69 "src/lexer.mll"
               t
# 398 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 69 "src/lexer.mll"
                 ( ws_flag := false; TYPE t )
# 402 "src/lexer.ml"

  | 24 ->
let
# 70 "src/lexer.mll"
             i
# 408 "src/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "src/lexer.mll"
                ( try Hashtbl.find symbolTable i
               with Not_found -> ws_flag := false; IDENT i )
# 413 "src/lexer.ml"

  | 25 ->
# 72 "src/lexer.mll"
             ( ws_flag := false; EOS )
# 418 "src/lexer.ml"

  | 26 ->
# 73 "src/lexer.mll"
      ( indent lexbuf )
# 423 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and indent lexbuf =
    __ocaml_lex_indent_rec lexbuf 36
and __ocaml_lex_indent_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 77 "src/lexer.mll"
          ( Printf.printf "BLOCK COMMENT BEGIN\n"; block_comment lexbuf )
# 434 "src/lexer.ml"

  | 1 ->
# 78 "src/lexer.mll"
               (Printf.printf "RECURSIVE COMMENT BEGIN\n"; rcom_count := !rcom_count + 1; recursive_comment lexbuf )
# 439 "src/lexer.ml"

  | 2 ->
# 79 "src/lexer.mll"
          ( Printf.printf "LINE COMMENT BEGIN\n"; comment lexbuf )
# 444 "src/lexer.ml"

  | 3 ->
# 82 "src/lexer.mll"
          ( incr ws_count; indent lexbuf; )
# 449 "src/lexer.ml"

  | 4 ->
# 83 "src/lexer.mll"
          ( ws_count := !ws_count + 4; indent lexbuf; )
# 454 "src/lexer.ml"

  | 5 ->
# 84 "src/lexer.mll"
             ( ws_count := 0; ws_flag := true; 
               if !ws_flag then NEWLINE else indent lexbuf)
# 460 "src/lexer.ml"

  | 6 ->
# 86 "src/lexer.mll"
      ( lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 1; 
        if !ws_flag then begin
          if !ws_count > Stack.top ws_stack then
            begin
              Stack.push !ws_count ws_stack;
              Parser.INDENT
            end
          else if !ws_count < Stack.top ws_stack then
            begin
              ignore (Stack.pop ws_stack);
              Parser.UNDENT
            end
          else begin
            main lexbuf 
          end
        end
        else begin
          main lexbuf 
        end )
# 483 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_indent_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 45
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 107 "src/lexer.mll"
            ( ws_count := 0; indent lexbuf)
# 494 "src/lexer.ml"

  | 1 ->
# 108 "src/lexer.mll"
            ( comment lexbuf )
# 499 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and block_comment lexbuf =
    __ocaml_lex_block_comment_rec lexbuf 49
and __ocaml_lex_block_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 111 "src/lexer.mll"
         ( Printf.printf "BLOCK COMMENT END\n"; main lexbuf )
# 510 "src/lexer.ml"

  | 1 ->
# 112 "src/lexer.mll"
         ( block_comment lexbuf )
# 515 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_block_comment_rec lexbuf __ocaml_lex_state

and recursive_comment lexbuf =
    __ocaml_lex_recursive_comment_rec lexbuf 53
and __ocaml_lex_recursive_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 117 "src/lexer.mll"
               ( ws_flag := false; Printf.printf "RECURSIVE COMMENT GOES DEEPER\n"; rcom_count := !rcom_count + 1; recursive_comment lexbuf )
# 526 "src/lexer.ml"

  | 1 ->
# 118 "src/lexer.mll"
             ( ws_flag := false; rcom_count := !rcom_count - 1; 
        if !rcom_count > 0 then
            begin
              Printf.printf "RECURSIVE COMMENT COMES UP\n"; 
              recursive_comment lexbuf
            end
        else
            begin
              Printf.printf "RECURSIVE COMMENT ENDS\n";
              main lexbuf
            end)
# 541 "src/lexer.ml"

  | 2 ->
# 129 "src/lexer.mll"
         ( recursive_comment lexbuf )
# 546 "src/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_recursive_comment_rec lexbuf __ocaml_lex_state

;;

